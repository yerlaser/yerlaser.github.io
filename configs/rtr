#!/usr/bin/env ruby

require 'optparse'
require 'io/console'

def main
  options = {}
  valid_methods = [
    'trim', 'trimleft', 'trimright', 'lower', 'sentence', 'swapcase', 'title',
    'upper', 'center', 'left', 'right'
  ]

  optparse = OptionParser.new do |o|
    o.banner = 'Usage: puts [options] [inputfile(s)]'
    o.on('-c', '--convert METHOD', Array     , 'Convert with specified method'                        )
    o.on('-e', '--eval TEXT'     , String    , 'Ruby expression to evaluate'                          )
    o.on('-n', '--number NUM'    , Integer   , 'Count of lines to process'                            )
    o.on('-N', '--Number NUM'    , Integer   , 'Option number for {center, left, right}'              )
    o.on('-f', '--find TEXT'     , String    , 'Text to search case insensitive (no regexp)'          )
    o.on('-F', '--Find TEXT'     , String    , 'Text to search case sensitive (no regexp)'            )
    o.on('-g', '--grep PATTERN'  , String    , 'Pattern to search'                                    )
    o.on('-o', '--output FILE'   , String    , 'Output file name'                                     )
    o.on('-S', '--Separator SEP' , String    , 'Option separator for {center, left, right}'           )
    o.on('-t', '--tee'           , TrueClass , 'Also print to stdout (if --output is specified'       )
    o.on('-x', '--xclude TEXT'   , String    , 'Text to exclude case insensitive (no regexp)'         )
    o.on('-X', '--Xclude TEXT'   , String    , 'Text to exclude case sensitive (no regexp)'           )
  end

  begin
    optparse.parse! into: options
  rescue
    puts optparse.to_s
    puts "Valid convert methods:", valid_methods.join(', ')
    exit __LINE__
  end

  if options.has_key? :convert and not (options[:convert].uniq - valid_methods).empty?
    puts "Valid convert methods:", valid_methods.join(', ')
    exit __LINE__
  end

  if not options[:Separator] then options[:Separator] = '=' end
  if not options[:Number] then options[:Number] = IO.console.winsize[1] end

  output_file = File.open(options[:output], 'w+') if options.has_key? :output

  ARGF.each.with_index(1) do |line, num|
    if ((options.has_key? :number) and (num > options[:number])) then break end
    if not filter_line(options, line) then next end
    o = process_line(options, line)
    if options.has_key? :output
      output_file.write(o)
      if options[:tee] then puts o end
    else
      puts o
    end
  end

  output_file.close if options.has_key? :output
end

def filter_line(options, line)
  if (options.has_key? :Find and not line.include? options[:Find]) then return false end
  if (options.has_key? :find and not line.downcase.include? options[:find].downcase) then return false end
  if (options.has_key? :grep and not line.match? options[:grep]) then return false end
  if (options.has_key? :Xclude and line.include? options[:Xclude]) then return false end
  if (options.has_key? :xclude and line.downcase.include? options[:xclude].downcase) then return false end
  true
end

def process_line(options, line)
  l = line.chomp
  endl = line.sub l, ''

  if options.has_key? :convert
    l = l.capitalize if options[:convert].include? 'sentence'
    l = l.center(options[:Number], options[:Separator]) if options[:convert].include? 'center'
    l = l.downcase if options[:convert].include? 'lower'
    l = l.ljust(options[:Number], options[:Separator]) if options[:convert].include? 'left'
    l = l.rjust(options[:Number], options[:Separator]) if options[:convert].include? 'right'
    l = l.swapcase if options[:convert].include? 'swapcase'
    l = l.split(/([[:alpha:]]+)/).map(:capitalize).join if options[:convert].include? 'title'
    l = l.upcase if options[:convert].include? 'upper'
  end

  if options.has_key? :eval
    l = eval(options[:eval])
  end

  "#{l}#{endl}"
end

if __FILE__ == $0
  main
end
