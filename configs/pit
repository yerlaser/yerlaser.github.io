#!/usr/bin/env python3

import argparse
import fileinput
import shutil
import sys

def filter_line(args, line):
  if args.find and (args.find not in line): return False
  if args.Find and (args.Find.lower() not in line.lower()): return False
  if args.exclude and (args.exclude in line): return False
  if args.Xclude and (args.Xclude.lower() in line.lower()): return False
  return True

def process_line(args, line):
  l = line
  if args.eval:
    try:
      l = eval(args.eval, {'__builtins__': {}}, {'line': l})
    except:
      return ''
  if args.convert:
    if 'trim' in args.convert: l = l.strip()
    if 'trimleft' in args.convert: l = l.lstrip()
    if 'trimright' in args.convert: l = l.rstrip()

    if 'lower' in args.convert: l = l.lower()
    if 'sentence' in args.convert: l = l.capitalize()
    if 'swapcase' in args.convert: l = l.swapcase()
    if 'title' in args.convert: l = l.title()
    if 'upper' in args.convert: l = l.upper()

    if 'center' in args.convert: l = l.center(args.Number, args.Separator)
    if 'left' in args.convert: l = l.ljust(args.Number, args.Separator)
    if 'right' in args.convert: l = l.rjust(args.Number, args.Separator)
  return l

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('-c', '--convert', choices = ['center', 'left', 'right',
    'lower', 'sentence', 'swapcase', 'title', 'upper',
    'trim', 'trimleft', 'trimright'], nargs = '*', help = 'Convert with specified method')
  parser.add_argument('-e', '--eval', help = 'Python expression to evaluate on line')
  parser.add_argument('-n', '--number', type = int, help = 'Count of lines to process')
  parser.add_argument('-N', '--Number', type = int, default = shutil.get_terminal_size()[0],
    help = 'Option number for {center, left, right}')
  parser.add_argument('-f', '--find', help = 'Text to search, no regexp, case insensitive')
  parser.add_argument('-F', '--Find', help = 'Text to search, no regexp, case sensitive')
  parser.add_argument('-S', '--Separator', default = ' ', help = 'Option separator for {center, left, right}')
  parser.add_argument('-x', '--exclude', help = 'Text to exclude, no regexp, case insensitive')
  parser.add_argument('-X', '--Xclude', help = 'Text to exclude, no regexp, case sensitive')
  parser.add_argument('input_files', metavar = 'FILE', nargs = '*', help = 'Additional input file(s)')
  args = parser.parse_args()

  if args.eval and '__' in args.eval:
    print('Dangerous eval string!')
    sys.exit(666)

  for count, line in enumerate(fileinput.input(files = args.input_files), start = 1):
    if args.number and (count > args.number): break
    l = line.rstrip()
    if not filter_line(args, l): continue
    o = process_line(args, l)
    print(o)
